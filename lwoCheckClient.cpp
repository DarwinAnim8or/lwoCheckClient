#include "stdafx.h"
#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <vector>
#include <sstream>
#include <filesystem>
#include <map>

#include <chrono>
using namespace std::chrono;
using namespace std;

//See, I would have used an unordered_map, but the compiler kept throwing errors about the "++" operator, which wasn't used.
struct stringPair {
	stringPair(const std::string& f, const std::string& s) {
		fileName = f;
		md5 = s;
	}

	std::string fileName;
	std::string md5;
};

//Global variables:
std::chrono::seconds g_TimeTakenToScan;
int g_MaxFiles = 0;
std::vector<stringPair*> g_FoundFiles{};
std::vector<stringPair*> g_MissingFiles{};

//Functions:
std::vector<std::string> SplitString(const string& string, const char delimiter) {
	std::vector<std::string> toReturn;
	std::stringstream sstream(string);
	std::string item;

	while (std::getline(sstream, item, delimiter)) {
		toReturn.push_back(item);
	}

	return toReturn;
}

bool CheckClientFiles(std::string versionTxt) { //returns true if a html report should be generated.
	ifstream is(versionTxt);
	string str;

	g_FoundFiles.reserve(8000); //number is just a guess.
	g_MissingFiles.reserve(8000);

	auto start = high_resolution_clock::now();
	
	while (getline(is, str)) {
		auto splitString = SplitString(str, ',');

		if (splitString.size() > 1) {
			if (splitString[0] != "82") {
				g_MaxFiles++;
				string line;

				string firstChar = splitString[2].substr(0, 1); //the filename
				string secondChar = splitString[2].substr(1, 1); //md5 of the file

				if (!std::filesystem::exists(splitString[0])) {
					g_MissingFiles.push_back(new stringPair(splitString[0], splitString[2]));
					cout << "File missing: " << splitString[0] << " (" << splitString[2] << ")" << endl;
				}
				else {
					//TODO: Make a check here to see if the MD5 of the file matches what we have stored.
					g_FoundFiles.push_back(new stringPair(splitString[0], splitString[2]));
				}
			}
		}
	} //end of the main while

	auto stop = high_resolution_clock::now();
	g_TimeTakenToScan = duration_cast<seconds>(stop - start);
	cout << "Time taken to generate report: " << g_TimeTakenToScan.count() << " seconds" << endl;

	is.close();

	return true;
}

void GenerateHTMLReport() {
	//Open the file:
	std::string timeStamp = std::to_string(std::time(0));
	std::ofstream out("./lwoCheckClient - " + timeStamp + ".html");
	if (!out.good()) {
		cout << "Couldn't gnerate .html log file!" << endl;
		return;
	}

	//Now, to write to the html file:
	out << "<DOCTYPE html>";
	out << "<html>";
	out << "<head>";
	out << "<title>lwoCheckClient Report - " << timeStamp << "</title>";
	out << "<style>table, th, td { border:1px solid black; } table { border-collapse: collapse; } </style>";
	out << "</head>";

	out << "<body>";
	out << "<h1>Client validity report - " << timeStamp << "</h1><h2>Generated by lwoCheckClient</h2>";
	out << "<h3><a href='GITHUB_URL'>GitHub repo</a></h3>";

	//Actually write our data here:
	out << "<p>Generating validation took: " << g_TimeTakenToScan.count() << " seconds.</p><br>";

	out << "<h3>Files Found: (" << g_FoundFiles.size() << ")</h3>";
	out << "<h3>Files Missing: (" << g_MissingFiles.size() << ")</h3>";
	out << "<table><tr><th>File</th><th>MD5</th></tr>";

	for (const auto& it : g_MissingFiles) {
		out << "<tr><td>";
		out << it->fileName << "</td><td>" << it->md5 << "</td></tr>";
	}

	out << "</table>";

	//I found it excessive to output all the files that were found; if you don't, feel free to uncomment this.
	/*out << "<h3>Files Found: (" << g_FoundFiles.size() << ")</h3>";
	out << "<table><tr><th>File</th><th>MD5</th></tr>";

	for (const auto& it : g_FoundFiles) {
		out << "<tr><td>";
		out << it->fileName << "</td><td>" << it->md5 << "</td></tr>";
	}*/

	out << "</table>";

	//Done, end the file:
	out << "</body>";
	out << "</html>";

	//Close the file, we're done:
	out.close();
}

int main(int argc, char* argv[]) {
	cout << "=============================================================" << endl;
	cout << "lwoCheckClient -- A tool to find missing files in LU clients." << endl;
	cout << "Written by Gie \'Max\' Vanommeslaeghe (DarwinAnim8or), 2017." << endl;
	cout << "Available at: https://github.com/DarwinAnim8or/lwoCheckClient" << endl;
	cout << "(Under the GPL v2 license)" << endl;
	cout << "Notes: provided 'AS-IS', no warranty of any kind!" << endl;
	cout << "lwoCheckClient version: 1.1" << endl;
	cout << "=============================================================" << endl << endl;

	std::string versionTxt = "./versions/trunk.txt";

	if (argc == 1) { cout << "Usage: lwoCheckClient ./versions/<version txt>" << endl; }
	else if (argc == 2) versionTxt = argv[1];

	cout << "Opening versions txt: " << versionTxt << endl;
	if (CheckClientFiles(versionTxt))
		GenerateHTMLReport();
	else
		cout << "Failed to validate client" << endl;

	for (size_t i = 0; i < g_MissingFiles.size(); ++i) delete g_MissingFiles[i];
	for (size_t i = 0; i < g_FoundFiles.size(); ++i) delete g_FoundFiles[i];

	cout << endl << "Press ENTER to exit." << endl;
	std::cin.get();
	return 0;
} //main